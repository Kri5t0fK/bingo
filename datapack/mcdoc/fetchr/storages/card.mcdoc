use ::fetchr::item::ItemCategory
use ::fetchr::item::ActiveItem

dispatch minecraft:storage[fetchr:card] to struct {
	spawn_location: int,
	/// struct with the random sequence seed that will be forwarded to the macro
	/// starting the game
	random_sequence_data: struct { seed: int },
	slots: [struct CardSlot {
		...ActiveItem,
		slot_id: int @ 0..24,
		current_display: #[text_component] string,
		item_collected?: true,
		has_bingo?: true,
		background: [#[text_component] string] @0..16,
	}],
	teams: [Team],
}

struct Team {
	id: #[id] string,
	slots?: [#[text_component] string],

	/// The background tile to render behind completed items of this team
	background?: #[text_component] string,

	/// The rendered card. Used to skip having to elvaluate the complex text
	/// component.
	card?: [#[text_component] string],

	/// The index of a background tile on a slot.
	/// Needed to render backgrounds in the correct order.
	background_index?: byte,
	item_count?: int,
}

dispatch minecraft:storage[tmp.fetchr:rand_data] to struct {
	seed: int,
	min: int,
	max: int,
	sequence: #[id(registry="random_sequence", definition=true)] string
}

dispatch minecraft:storage[tmp.fetchr:card_generation] to struct {
	items: [ActiveItem],
	skipped_items: [ActiveItem],
	removed_items: [ActiveItem],
	recalculate_items_iter: struct {i: int},
	item_categories: [ItemCategory],
	category: ItemCategory,
	category_items: [ActiveItem],
	categories_with_removed_item: [ItemCategory],
}